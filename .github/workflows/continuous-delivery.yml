name: Continuous Delivery

on:
    push:
        branches:
            - main

jobs:
    Build:
        name: Publish Build
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        steps:
            - name: Checkout Project
              uses: actions/checkout@v2
            - name: Use Node.js 12
              uses: actions/setup-node@v1
              with:
                  node-version: 12
            - name: Get npm cache directory
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"
            - name: Restore CI Cache
              uses: actions/cache@v2
              with:
                  path: ${{ steps.npm-cache.outputs.dir }}
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                    ${{ runner.os }}-node-
            - name: Install Dependencies
              run: npm install
            - name: Build Code
              uses: icrawl/action-tsc@v1
              with:
                  build: src
            - name: Push new code
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              run: |
                  echo -e "\n# Initialize some useful variables"
                  REPO="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
                  BRANCH_OR_TAG=`awk -F/ '{print $2}' <<< $GITHUB_REF`
                  CURRENT_BRANCH=`awk -F/ '{print $NF}' <<< $GITHUB_REF`
                  if [ "$BRANCH_OR_TAG" == "heads" ]; then
                    SOURCE_TYPE="branch"
                  else
                    SOURCE_TYPE="tag"
                  fi
                  echo -e "\n# Checkout the repo in the target branch"
                  TARGET_BRANCH="build"
                  git clone $REPO out -b $TARGET_BRANCH
                  echo -e "\n# Remove any old files in the dist folder"
                  rm -rfv out/dist/*
                  echo -e "\n# Move the generated docs to the newly-checked-out repo, to be committed and pushed"
                  rsync -vaI package.json out/
                  rsync -vaI dist/ out/dist
                  echo -e "\n# Removing TSC incremental file"
                  rm -rfv out/dist/**/*.tsbuildinfo
                  echo -e "\n# Commit and push"
                  cd out
                  git add --all .
                  git config user.name "${GITHUB_ACTOR}"
                  git config user.email "${GITHUB_EMAIL}"
                  git commit -m "build: tsc build for ${GITHUB_SHA}" || true
                  git push origin $TARGET_BRANCH
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_ACTOR: TheLearneer
                  GITHUB_EMAIL: contact@santoshb.com.np
